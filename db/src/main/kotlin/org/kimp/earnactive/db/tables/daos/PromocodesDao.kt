/*
 * This file is generated by jOOQ.
 */
package org.kimp.earnactive.db.tables.daos


import java.time.LocalDate
import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.kimp.earnactive.db.tables.Promocodes
import org.kimp.earnactive.db.tables.records.PromocodesRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PromocodesDao(configuration: Configuration?) : DAOImpl<PromocodesRecord, org.kimp.earnactive.db.tables.pojos.Promocodes, UUID>(Promocodes.PROMOCODES, org.kimp.earnactive.db.tables.pojos.Promocodes::class.java, configuration) {

    /**
     * Create a new PromocodesDao without any configuration
     */
    constructor(): this(null)

    public override fun getId(o: org.kimp.earnactive.db.tables.pojos.Promocodes): UUID? = o.uuid

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfUuid(lowerInclusive: UUID?, upperInclusive: UUID?): List<org.kimp.earnactive.db.tables.pojos.Promocodes> = fetchRange(Promocodes.PROMOCODES.UUID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    fun fetchByUuid(vararg values: UUID): List<org.kimp.earnactive.db.tables.pojos.Promocodes> = fetch(Promocodes.PROMOCODES.UUID, *values)

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    fun fetchOneByUuid(value: UUID): org.kimp.earnactive.db.tables.pojos.Promocodes? = fetchOne(Promocodes.PROMOCODES.UUID, value)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: String?, upperInclusive: String?): List<org.kimp.earnactive.db.tables.pojos.Promocodes> = fetchRange(Promocodes.PROMOCODES.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: String): List<org.kimp.earnactive.db.tables.pojos.Promocodes> = fetch(Promocodes.PROMOCODES.NAME, *values)

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDescription(lowerInclusive: String?, upperInclusive: String?): List<org.kimp.earnactive.db.tables.pojos.Promocodes> = fetchRange(Promocodes.PROMOCODES.DESCRIPTION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    fun fetchByDescription(vararg values: String): List<org.kimp.earnactive.db.tables.pojos.Promocodes> = fetch(Promocodes.PROMOCODES.DESCRIPTION, *values)

    /**
     * Fetch records that have <code>value BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfValue(lowerInclusive: String?, upperInclusive: String?): List<org.kimp.earnactive.db.tables.pojos.Promocodes> = fetchRange(Promocodes.PROMOCODES.VALUE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>value IN (values)</code>
     */
    fun fetchByValue(vararg values: String): List<org.kimp.earnactive.db.tables.pojos.Promocodes> = fetch(Promocodes.PROMOCODES.VALUE, *values)

    /**
     * Fetch records that have <code>general_count BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfGeneralCount(lowerInclusive: Int?, upperInclusive: Int?): List<org.kimp.earnactive.db.tables.pojos.Promocodes> = fetchRange(Promocodes.PROMOCODES.GENERAL_COUNT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>general_count IN (values)</code>
     */
    fun fetchByGeneralCount(vararg values: Int): List<org.kimp.earnactive.db.tables.pojos.Promocodes> = fetch(Promocodes.PROMOCODES.GENERAL_COUNT, *values.toTypedArray())

    /**
     * Fetch records that have <code>available_count BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAvailableCount(lowerInclusive: Int?, upperInclusive: Int?): List<org.kimp.earnactive.db.tables.pojos.Promocodes> = fetchRange(Promocodes.PROMOCODES.AVAILABLE_COUNT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>available_count IN (values)</code>
     */
    fun fetchByAvailableCount(vararg values: Int): List<org.kimp.earnactive.db.tables.pojos.Promocodes> = fetch(Promocodes.PROMOCODES.AVAILABLE_COUNT, *values.toTypedArray())

    /**
     * Fetch records that have <code>expiration_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfExpirationDate(lowerInclusive: LocalDate?, upperInclusive: LocalDate?): List<org.kimp.earnactive.db.tables.pojos.Promocodes> = fetchRange(Promocodes.PROMOCODES.EXPIRATION_DATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>expiration_date IN (values)</code>
     */
    fun fetchByExpirationDate(vararg values: LocalDate): List<org.kimp.earnactive.db.tables.pojos.Promocodes> = fetch(Promocodes.PROMOCODES.EXPIRATION_DATE, *values)

    /**
     * Fetch records that have <code>cost BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCost(lowerInclusive: Int?, upperInclusive: Int?): List<org.kimp.earnactive.db.tables.pojos.Promocodes> = fetchRange(Promocodes.PROMOCODES.COST, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>cost IN (values)</code>
     */
    fun fetchByCost(vararg values: Int): List<org.kimp.earnactive.db.tables.pojos.Promocodes> = fetch(Promocodes.PROMOCODES.COST, *values.toTypedArray())
}
