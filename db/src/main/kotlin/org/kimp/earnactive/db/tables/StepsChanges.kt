/*
 * This file is generated by jOOQ.
 */
package org.kimp.earnactive.db.tables


import java.time.LocalDateTime
import java.util.UUID
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.kimp.earnactive.db.Public
import org.kimp.earnactive.db.keys.STEPS_CHANGES__FK_STEPS_USER
import org.kimp.earnactive.db.tables.records.StepsChangesRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class StepsChanges(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, StepsChangesRecord>?,
    aliased: Table<StepsChangesRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<StepsChangesRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.steps_changes</code>
         */
        val STEPS_CHANGES: StepsChanges = StepsChanges()
    }

    /**
     * The class holding records for this type
     */
    public override fun getRecordType(): Class<StepsChangesRecord> = StepsChangesRecord::class.java

    /**
     * The column <code>public.steps_changes.user_uuid</code>.
     */
    val USER_UUID: TableField<StepsChangesRecord, UUID?> = createField(DSL.name("user_uuid"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.steps_changes.diff</code>.
     */
    val DIFF: TableField<StepsChangesRecord, Int?> = createField(DSL.name("diff"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.steps_changes.timestamp</code>.
     */
    val TIMESTAMP: TableField<StepsChangesRecord, LocalDateTime?> = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<StepsChangesRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<StepsChangesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.steps_changes</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.steps_changes</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.steps_changes</code> table reference
     */
    constructor(): this(DSL.name("steps_changes"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, StepsChangesRecord>): this(Internal.createPathAlias(child, key), child, key, STEPS_CHANGES, null)
    public override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    public override fun getReferences(): List<ForeignKey<StepsChangesRecord, *>> = listOf(STEPS_CHANGES__FK_STEPS_USER)

    private lateinit var _users: Users

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    fun users(): Users {
        if (!this::_users.isInitialized)
            _users = Users(this, STEPS_CHANGES__FK_STEPS_USER)

        return _users;
    }

    val users: Users
        get(): Users = users()
    public override fun `as`(alias: String): StepsChanges = StepsChanges(DSL.name(alias), this)
    public override fun `as`(alias: Name): StepsChanges = StepsChanges(alias, this)
    public override fun `as`(alias: Table<*>): StepsChanges = StepsChanges(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    public override fun rename(name: String): StepsChanges = StepsChanges(DSL.name(name), null)

    /**
     * Rename this table
     */
    public override fun rename(name: Name): StepsChanges = StepsChanges(name, null)

    /**
     * Rename this table
     */
    public override fun rename(name: Table<*>): StepsChanges = StepsChanges(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    public override fun fieldsRow(): Row3<UUID?, Int?, LocalDateTime?> = super.fieldsRow() as Row3<UUID?, Int?, LocalDateTime?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, Int?, LocalDateTime?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, Int?, LocalDateTime?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
